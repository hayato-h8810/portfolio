import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'

export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}

export type Auth_Provider_Credentials = {
  email: Scalars['String']
  password: Scalars['String']
}

/** Autogenerated input type of AddFolder */
export type AddFolderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  folderName: Scalars['String']
}

export type AuthProviderSignupData = {
  credentials?: InputMaybe<Auth_Provider_Credentials>
}

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  authProvider?: InputMaybe<AuthProviderSignupData>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  name: Scalars['String']
}

/** Autogenerated input type of DeleteFolder */
export type DeleteFolderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  folderId: Scalars['String']
}

/** Autogenerated input type of DeleteUrl */
export type DeleteUrlInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  folderId: Scalars['String']
  urlId: Scalars['String']
}

/** Autogenerated input type of DeleteUser */
export type DeleteUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  password: Scalars['String']
}

/** Autogenerated return type of DeleteUser */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  user?: Maybe<User>
}

/** Autogenerated input type of DeleteVisitingHistory */
export type DeleteVisitingHistoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  id: Scalars['String']
}

/** Autogenerated input type of EditFolder */
export type EditFolderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  folderId: Scalars['String']
  folderName: Scalars['String']
}

/** Autogenerated input type of EditUrl */
export type EditUrlInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  folderId?: InputMaybe<Scalars['String']>
  url: UrlInput
  urlId: Scalars['String']
}

export type Folder = {
  __typename?: 'Folder'
  id: Scalars['ID']
  name: Scalars['String']
  urls: Array<Url>
}

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  credentials?: InputMaybe<Auth_Provider_Credentials>
}

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: 'LoginPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  user?: Maybe<User>
}

/** Autogenerated return type of Logout */
export type LogoutPayload = {
  __typename?: 'LogoutPayload'
  id?: Maybe<Scalars['String']>
}

export type Mutation = {
  __typename?: 'Mutation'
  addFolder?: Maybe<Folder>
  createUser?: Maybe<User>
  deleteFolder?: Maybe<Folder>
  deleteUrl?: Maybe<Folder>
  deleteUser?: Maybe<DeleteUserPayload>
  deleteVisitingHistory?: Maybe<Array<VisitingHistory>>
  editFolder?: Maybe<Folder>
  editUrl?: Maybe<Array<Folder>>
  login?: Maybe<LoginPayload>
  logout?: Maybe<LogoutPayload>
  recordVisitingHistory?: Maybe<VisitingHistory>
  saveUrl?: Maybe<Folder>
}

export type MutationAddFolderArgs = {
  input: AddFolderInput
}

export type MutationCreateUserArgs = {
  input: CreateUserInput
}

export type MutationDeleteFolderArgs = {
  input: DeleteFolderInput
}

export type MutationDeleteUrlArgs = {
  input: DeleteUrlInput
}

export type MutationDeleteUserArgs = {
  input: DeleteUserInput
}

export type MutationDeleteVisitingHistoryArgs = {
  input: DeleteVisitingHistoryInput
}

export type MutationEditFolderArgs = {
  input: EditFolderInput
}

export type MutationEditUrlArgs = {
  input: EditUrlInput
}

export type MutationLoginArgs = {
  input: LoginInput
}

export type MutationRecordVisitingHistoryArgs = {
  input: RecordVisitingHistoryInput
}

export type MutationSaveUrlArgs = {
  input: SaveUrlInput
}

export type Query = {
  __typename?: 'Query'
  currentUser?: Maybe<User>
  fetchFolderUrl?: Maybe<Array<Folder>>
  fetchVisitingHistory?: Maybe<Array<VisitingHistory>>
}

/** Autogenerated input type of RecordVisitingHistory */
export type RecordVisitingHistoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  date: Scalars['String']
  urlId: Scalars['String']
}

/** Autogenerated input type of SaveUrl */
export type SaveUrlInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  folderId?: InputMaybe<Scalars['String']>
  folderName?: InputMaybe<Scalars['String']>
  url: UrlInput
}

export type Url = {
  __typename?: 'Url'
  folderId: Scalars['ID']
  id: Scalars['ID']
  importance: Scalars['Int']
  memo?: Maybe<Scalars['String']>
  notification?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  url: Scalars['String']
}

export type UrlInput = {
  importance: Scalars['Int']
  memo?: InputMaybe<Scalars['String']>
  notification?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  url: Scalars['String']
}

export type User = {
  __typename?: 'User'
  email: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
}

export type VisitingHistory = {
  __typename?: 'VisitingHistory'
  date: Scalars['String']
  id: Scalars['ID']
  urlId: Scalars['ID']
}

export type AddFolderMutationVariables = Exact<{
  folderName: Scalars['String']
}>

export type AddFolderMutation = {
  __typename?: 'Mutation'
  addFolder?: {
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  } | null
}

export type CreateUserMutationVariables = Exact<{
  credentials: Auth_Provider_Credentials
  name: Scalars['String']
}>

export type CreateUserMutation = {
  __typename?: 'Mutation'
  createUser?: { __typename?: 'User'; id: string; name: string; email: string } | null
}

export type DeleteFolderMutationVariables = Exact<{
  folderId: Scalars['String']
}>

export type DeleteFolderMutation = {
  __typename?: 'Mutation'
  deleteFolder?: {
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  } | null
}

export type DeleteUrlMutationVariables = Exact<{
  urlId: Scalars['String']
  folderId: Scalars['String']
}>

export type DeleteUrlMutation = {
  __typename?: 'Mutation'
  deleteUrl?: {
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  } | null
}

export type DeleteUserMutationVariables = Exact<{
  password: Scalars['String']
}>

export type DeleteUserMutation = {
  __typename?: 'Mutation'
  deleteUser?: {
    __typename?: 'DeleteUserPayload'
    user?: { __typename?: 'User'; id: string; name: string; email: string } | null
  } | null
}

export type DeleteVisitingHistoryMutationVariables = Exact<{
  id: Scalars['String']
}>

export type DeleteVisitingHistoryMutation = {
  __typename?: 'Mutation'
  deleteVisitingHistory?: Array<{ __typename?: 'VisitingHistory'; id: string; urlId: string; date: string }> | null
}

export type EditFolderMutationVariables = Exact<{
  folderId: Scalars['String']
  folderName: Scalars['String']
}>

export type EditFolderMutation = {
  __typename?: 'Mutation'
  editFolder?: {
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  } | null
}

export type EditUrlMutationVariables = Exact<{
  url: UrlInput
  folderId?: InputMaybe<Scalars['String']>
  urlId: Scalars['String']
}>

export type EditUrlMutation = {
  __typename?: 'Mutation'
  editUrl?: Array<{
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  }> | null
}

export type LoginMutationVariables = Exact<{
  credentials: Auth_Provider_Credentials
}>

export type LoginMutation = {
  __typename?: 'Mutation'
  login?: {
    __typename?: 'LoginPayload'
    user?: { __typename?: 'User'; id: string; name: string; email: string } | null
  } | null
}

export type LogoutMutationVariables = Exact<{ [key: string]: never }>

export type LogoutMutation = {
  __typename?: 'Mutation'
  logout?: { __typename?: 'LogoutPayload'; id?: string | null } | null
}

export type RecordVisitingHistoryMutationVariables = Exact<{
  urlId: Scalars['String']
  date: Scalars['String']
}>

export type RecordVisitingHistoryMutation = {
  __typename?: 'Mutation'
  recordVisitingHistory?: { __typename?: 'VisitingHistory'; id: string; urlId: string; date: string } | null
}

export type SaveUrlMutationVariables = Exact<{
  url: UrlInput
  folderName?: InputMaybe<Scalars['String']>
  folderId?: InputMaybe<Scalars['String']>
}>

export type SaveUrlMutation = {
  __typename?: 'Mutation'
  saveUrl?: {
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  } | null
}

export type CurrentUserQueryVariables = Exact<{ [key: string]: never }>

export type CurrentUserQuery = {
  __typename?: 'Query'
  currentUser?: { __typename?: 'User'; id: string; name: string; email: string } | null
}

export type FetchFolderUrlQueryVariables = Exact<{ [key: string]: never }>

export type FetchFolderUrlQuery = {
  __typename?: 'Query'
  fetchFolderUrl?: Array<{
    __typename?: 'Folder'
    id: string
    name: string
    urls: Array<{
      __typename?: 'Url'
      id: string
      title?: string | null
      memo?: string | null
      notification?: string | null
      url: string
      importance: number
      folderId: string
    }>
  }> | null
}

export type FetchVisitingHistoryQueryVariables = Exact<{ [key: string]: never }>

export type FetchVisitingHistoryQuery = {
  __typename?: 'Query'
  fetchVisitingHistory?: Array<{ __typename?: 'VisitingHistory'; id: string; urlId: string; date: string }> | null
}

export const AddFolderDocument = gql`
  mutation addFolder($folderName: String!) {
    addFolder(input: { folderName: $folderName }) {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`
export type AddFolderMutationFn = Apollo.MutationFunction<AddFolderMutation, AddFolderMutationVariables>

/**
 * __useAddFolderMutation__
 *
 * To run a mutation, you first call `useAddFolderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddFolderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addFolderMutation, { data, loading, error }] = useAddFolderMutation({
 *   variables: {
 *      folderName: // value for 'folderName'
 *   },
 * });
 */
export function useAddFolderMutation(
  baseOptions?: Apollo.MutationHookOptions<AddFolderMutation, AddFolderMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<AddFolderMutation, AddFolderMutationVariables>(AddFolderDocument, options)
}
export type AddFolderMutationHookResult = ReturnType<typeof useAddFolderMutation>
export type AddFolderMutationResult = Apollo.MutationResult<AddFolderMutation>
export type AddFolderMutationOptions = Apollo.BaseMutationOptions<AddFolderMutation, AddFolderMutationVariables>
export const CreateUserDocument = gql`
  mutation createUser($credentials: AUTH_PROVIDER_CREDENTIALS!, $name: String!) {
    createUser(input: { name: $name, authProvider: { credentials: $credentials } }) {
      id
      name
      email
    }
  }
`
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      credentials: // value for 'credentials'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useCreateUserMutation(
  baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options)
}
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>
export const DeleteFolderDocument = gql`
  mutation deleteFolder($folderId: String!) {
    deleteFolder(input: { folderId: $folderId }) {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`
export type DeleteFolderMutationFn = Apollo.MutationFunction<DeleteFolderMutation, DeleteFolderMutationVariables>

/**
 * __useDeleteFolderMutation__
 *
 * To run a mutation, you first call `useDeleteFolderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFolderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFolderMutation, { data, loading, error }] = useDeleteFolderMutation({
 *   variables: {
 *      folderId: // value for 'folderId'
 *   },
 * });
 */
export function useDeleteFolderMutation(
  baseOptions?: Apollo.MutationHookOptions<DeleteFolderMutation, DeleteFolderMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DeleteFolderMutation, DeleteFolderMutationVariables>(DeleteFolderDocument, options)
}
export type DeleteFolderMutationHookResult = ReturnType<typeof useDeleteFolderMutation>
export type DeleteFolderMutationResult = Apollo.MutationResult<DeleteFolderMutation>
export type DeleteFolderMutationOptions = Apollo.BaseMutationOptions<
  DeleteFolderMutation,
  DeleteFolderMutationVariables
>
export const DeleteUrlDocument = gql`
  mutation deleteUrl($urlId: String!, $folderId: String!) {
    deleteUrl(input: { urlId: $urlId, folderId: $folderId }) {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`
export type DeleteUrlMutationFn = Apollo.MutationFunction<DeleteUrlMutation, DeleteUrlMutationVariables>

/**
 * __useDeleteUrlMutation__
 *
 * To run a mutation, you first call `useDeleteUrlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUrlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUrlMutation, { data, loading, error }] = useDeleteUrlMutation({
 *   variables: {
 *      urlId: // value for 'urlId'
 *      folderId: // value for 'folderId'
 *   },
 * });
 */
export function useDeleteUrlMutation(
  baseOptions?: Apollo.MutationHookOptions<DeleteUrlMutation, DeleteUrlMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DeleteUrlMutation, DeleteUrlMutationVariables>(DeleteUrlDocument, options)
}
export type DeleteUrlMutationHookResult = ReturnType<typeof useDeleteUrlMutation>
export type DeleteUrlMutationResult = Apollo.MutationResult<DeleteUrlMutation>
export type DeleteUrlMutationOptions = Apollo.BaseMutationOptions<DeleteUrlMutation, DeleteUrlMutationVariables>
export const DeleteUserDocument = gql`
  mutation deleteUser($password: String!) {
    deleteUser(input: { password: $password }) {
      user {
        id
        name
        email
      }
    }
  }
`
export type DeleteUserMutationFn = Apollo.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>

/**
 * __useDeleteUserMutation__
 *
 * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({
 *   variables: {
 *      password: // value for 'password'
 *   },
 * });
 */
export function useDeleteUserMutation(
  baseOptions?: Apollo.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, options)
}
export type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>
export type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>
export type DeleteUserMutationOptions = Apollo.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>
export const DeleteVisitingHistoryDocument = gql`
  mutation deleteVisitingHistory($id: String!) {
    deleteVisitingHistory(input: { id: $id }) {
      id
      urlId
      date
    }
  }
`
export type DeleteVisitingHistoryMutationFn = Apollo.MutationFunction<
  DeleteVisitingHistoryMutation,
  DeleteVisitingHistoryMutationVariables
>

/**
 * __useDeleteVisitingHistoryMutation__
 *
 * To run a mutation, you first call `useDeleteVisitingHistoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteVisitingHistoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteVisitingHistoryMutation, { data, loading, error }] = useDeleteVisitingHistoryMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteVisitingHistoryMutation(
  baseOptions?: Apollo.MutationHookOptions<DeleteVisitingHistoryMutation, DeleteVisitingHistoryMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DeleteVisitingHistoryMutation, DeleteVisitingHistoryMutationVariables>(
    DeleteVisitingHistoryDocument,
    options
  )
}
export type DeleteVisitingHistoryMutationHookResult = ReturnType<typeof useDeleteVisitingHistoryMutation>
export type DeleteVisitingHistoryMutationResult = Apollo.MutationResult<DeleteVisitingHistoryMutation>
export type DeleteVisitingHistoryMutationOptions = Apollo.BaseMutationOptions<
  DeleteVisitingHistoryMutation,
  DeleteVisitingHistoryMutationVariables
>
export const EditFolderDocument = gql`
  mutation editFolder($folderId: String!, $folderName: String!) {
    editFolder(input: { folderId: $folderId, folderName: $folderName }) {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`
export type EditFolderMutationFn = Apollo.MutationFunction<EditFolderMutation, EditFolderMutationVariables>

/**
 * __useEditFolderMutation__
 *
 * To run a mutation, you first call `useEditFolderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditFolderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editFolderMutation, { data, loading, error }] = useEditFolderMutation({
 *   variables: {
 *      folderId: // value for 'folderId'
 *      folderName: // value for 'folderName'
 *   },
 * });
 */
export function useEditFolderMutation(
  baseOptions?: Apollo.MutationHookOptions<EditFolderMutation, EditFolderMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<EditFolderMutation, EditFolderMutationVariables>(EditFolderDocument, options)
}
export type EditFolderMutationHookResult = ReturnType<typeof useEditFolderMutation>
export type EditFolderMutationResult = Apollo.MutationResult<EditFolderMutation>
export type EditFolderMutationOptions = Apollo.BaseMutationOptions<EditFolderMutation, EditFolderMutationVariables>
export const EditUrlDocument = gql`
  mutation editUrl($url: UrlInput!, $folderId: String, $urlId: String!) {
    editUrl(input: { url: $url, folderId: $folderId, urlId: $urlId }) {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`
export type EditUrlMutationFn = Apollo.MutationFunction<EditUrlMutation, EditUrlMutationVariables>

/**
 * __useEditUrlMutation__
 *
 * To run a mutation, you first call `useEditUrlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditUrlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editUrlMutation, { data, loading, error }] = useEditUrlMutation({
 *   variables: {
 *      url: // value for 'url'
 *      folderId: // value for 'folderId'
 *      urlId: // value for 'urlId'
 *   },
 * });
 */
export function useEditUrlMutation(
  baseOptions?: Apollo.MutationHookOptions<EditUrlMutation, EditUrlMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<EditUrlMutation, EditUrlMutationVariables>(EditUrlDocument, options)
}
export type EditUrlMutationHookResult = ReturnType<typeof useEditUrlMutation>
export type EditUrlMutationResult = Apollo.MutationResult<EditUrlMutation>
export type EditUrlMutationOptions = Apollo.BaseMutationOptions<EditUrlMutation, EditUrlMutationVariables>
export const LoginDocument = gql`
  mutation login($credentials: AUTH_PROVIDER_CREDENTIALS!) {
    login(input: { credentials: $credentials }) {
      user {
        id
        name
        email
      }
    }
  }
`
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      credentials: // value for 'credentials'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options)
}
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>
export const LogoutDocument = gql`
  mutation logout {
    logout {
      id
    }
  }
`
export type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options)
}
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>
export type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>
export type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>
export const RecordVisitingHistoryDocument = gql`
  mutation recordVisitingHistory($urlId: String!, $date: String!) {
    recordVisitingHistory(input: { urlId: $urlId, date: $date }) {
      id
      urlId
      date
    }
  }
`
export type RecordVisitingHistoryMutationFn = Apollo.MutationFunction<
  RecordVisitingHistoryMutation,
  RecordVisitingHistoryMutationVariables
>

/**
 * __useRecordVisitingHistoryMutation__
 *
 * To run a mutation, you first call `useRecordVisitingHistoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRecordVisitingHistoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [recordVisitingHistoryMutation, { data, loading, error }] = useRecordVisitingHistoryMutation({
 *   variables: {
 *      urlId: // value for 'urlId'
 *      date: // value for 'date'
 *   },
 * });
 */
export function useRecordVisitingHistoryMutation(
  baseOptions?: Apollo.MutationHookOptions<RecordVisitingHistoryMutation, RecordVisitingHistoryMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<RecordVisitingHistoryMutation, RecordVisitingHistoryMutationVariables>(
    RecordVisitingHistoryDocument,
    options
  )
}
export type RecordVisitingHistoryMutationHookResult = ReturnType<typeof useRecordVisitingHistoryMutation>
export type RecordVisitingHistoryMutationResult = Apollo.MutationResult<RecordVisitingHistoryMutation>
export type RecordVisitingHistoryMutationOptions = Apollo.BaseMutationOptions<
  RecordVisitingHistoryMutation,
  RecordVisitingHistoryMutationVariables
>
export const SaveUrlDocument = gql`
  mutation saveUrl($url: UrlInput!, $folderName: String, $folderId: String) {
    saveUrl(input: { url: $url, folderName: $folderName, folderId: $folderId }) {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`
export type SaveUrlMutationFn = Apollo.MutationFunction<SaveUrlMutation, SaveUrlMutationVariables>

/**
 * __useSaveUrlMutation__
 *
 * To run a mutation, you first call `useSaveUrlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveUrlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveUrlMutation, { data, loading, error }] = useSaveUrlMutation({
 *   variables: {
 *      url: // value for 'url'
 *      folderName: // value for 'folderName'
 *      folderId: // value for 'folderId'
 *   },
 * });
 */
export function useSaveUrlMutation(
  baseOptions?: Apollo.MutationHookOptions<SaveUrlMutation, SaveUrlMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SaveUrlMutation, SaveUrlMutationVariables>(SaveUrlDocument, options)
}
export type SaveUrlMutationHookResult = ReturnType<typeof useSaveUrlMutation>
export type SaveUrlMutationResult = Apollo.MutationResult<SaveUrlMutation>
export type SaveUrlMutationOptions = Apollo.BaseMutationOptions<SaveUrlMutation, SaveUrlMutationVariables>
export const CurrentUserDocument = gql`
  query currentUser {
    currentUser {
      id
      name
      email
    }
  }
`

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(
  baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options)
}
export function useCurrentUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options)
}
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>
export const FetchFolderUrlDocument = gql`
  query fetchFolderUrl {
    fetchFolderUrl {
      id
      name
      urls {
        id
        title
        memo
        notification
        url
        importance
        folderId
      }
    }
  }
`

/**
 * __useFetchFolderUrlQuery__
 *
 * To run a query within a React component, call `useFetchFolderUrlQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchFolderUrlQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchFolderUrlQuery({
 *   variables: {
 *   },
 * });
 */
export function useFetchFolderUrlQuery(
  baseOptions?: Apollo.QueryHookOptions<FetchFolderUrlQuery, FetchFolderUrlQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FetchFolderUrlQuery, FetchFolderUrlQueryVariables>(FetchFolderUrlDocument, options)
}
export function useFetchFolderUrlLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<FetchFolderUrlQuery, FetchFolderUrlQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FetchFolderUrlQuery, FetchFolderUrlQueryVariables>(FetchFolderUrlDocument, options)
}
export type FetchFolderUrlQueryHookResult = ReturnType<typeof useFetchFolderUrlQuery>
export type FetchFolderUrlLazyQueryHookResult = ReturnType<typeof useFetchFolderUrlLazyQuery>
export type FetchFolderUrlQueryResult = Apollo.QueryResult<FetchFolderUrlQuery, FetchFolderUrlQueryVariables>
export const FetchVisitingHistoryDocument = gql`
  query fetchVisitingHistory {
    fetchVisitingHistory {
      id
      urlId
      date
    }
  }
`

/**
 * __useFetchVisitingHistoryQuery__
 *
 * To run a query within a React component, call `useFetchVisitingHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchVisitingHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchVisitingHistoryQuery({
 *   variables: {
 *   },
 * });
 */
export function useFetchVisitingHistoryQuery(
  baseOptions?: Apollo.QueryHookOptions<FetchVisitingHistoryQuery, FetchVisitingHistoryQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FetchVisitingHistoryQuery, FetchVisitingHistoryQueryVariables>(
    FetchVisitingHistoryDocument,
    options
  )
}
export function useFetchVisitingHistoryLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<FetchVisitingHistoryQuery, FetchVisitingHistoryQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FetchVisitingHistoryQuery, FetchVisitingHistoryQueryVariables>(
    FetchVisitingHistoryDocument,
    options
  )
}
export type FetchVisitingHistoryQueryHookResult = ReturnType<typeof useFetchVisitingHistoryQuery>
export type FetchVisitingHistoryLazyQueryHookResult = ReturnType<typeof useFetchVisitingHistoryLazyQuery>
export type FetchVisitingHistoryQueryResult = Apollo.QueryResult<
  FetchVisitingHistoryQuery,
  FetchVisitingHistoryQueryVariables
>
